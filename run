#!/bin/bash

# Check if the argument is 'install'
if [ "$1" == "install" ]; then
  echo "Installing.."
  npm install
  npm run build
  if [ $? -eq 0 ]; then
    echo "Install succeeded. Build successful."
    exit 0
  else
    echo "Install failed"
    exit 1
  fi
fi

if [ "$1" == "test" ]; then
  # Run the tests and generate a coverage report, capturing both stdout and stderr
  OUTPUT=$(npx vitest run --coverage 2>/dev/null)
  VITEST_EXIT_CODE=$?

  # If Vitest fails, still display the number of passed tests
  if [ $VITEST_EXIT_CODE -ne 0 ]; then
    # Extract the number of failed tests and total tests
    TESTS_FAILED=$(echo "$OUTPUT" | grep 'Tests' | awk '{print $2}')
    TOTAL_TESTS=$(echo "$OUTPUT" | grep 'Tests' | awk '{print $5}' | sed 's/[()]//g')

    # Calculate the number of passed tests
    TESTS_PASSED=$((TOTAL_TESTS - TESTS_FAILED))

    # Output the results in the specified format
    echo "$TESTS_PASSED/$TOTAL_TESTS test cases passed. ??% line coverage achieved."
    exit 1
  fi

  # Extract the number of tests passed and total tests
  TESTS_PASSED=$(echo "$OUTPUT" | grep 'Tests' | awk '{print $2}')
  TOTAL_TESTS=$(echo "$OUTPUT" | grep 'Tests' | awk '{print $4}' | sed 's/[()]//g')
  
  # Extract line coverage percentage
  COVERAGE_PERCENT=$(echo "$OUTPUT" | grep 'All files' | awk '{print $10}')

  # Round the coverage percentage to the nearest whole number
  COVERAGE_ROUNDED=$(printf "%.0f" "$COVERAGE_PERCENT")

  # Output the results in the specified format
  echo "$TESTS_PASSED/$TOTAL_TESTS test cases passed. $COVERAGE_ROUNDED% line coverage achieved."

  exit 0
fi

# Handle other cases
node dist/index.js "$1"
